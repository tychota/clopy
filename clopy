#!/usr/bin/env bash

# clopy: A CLI tool to efficiently copy code from codebase to LLMs
# 
# This script uses fzf, rg, and fd for file exploration, respects .gitignore by default,
# utilizes files-to-prompt CLI for processing, and uses pbcopy for copying results.
# 
# Dependencies: fzf, fd, files-to-prompt, pbcopy (macOS) or xclip (Linux)
#
# Author: Assistant
# Version: 1.0

set -euo pipefail

# Default configuration
DEFAULT_FORMAT="cxml"  # Claude XML format as default
DEFAULT_PREVIEW_CMD="bat --style=numbers --color=always --line-range :50 {} 2>/dev/null || cat {}"
RESPECT_GITIGNORE=true
INCLUDE_HIDDEN=false
SHOW_LINE_NUMBERS=false
OUTPUT_FILE=""
NO_COPY=false
EXTENSIONS=()
IGNORE_PATTERNS=()
SHOW_PREVIEW=true

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Usage information
usage() {
    cat << 'EOF'
Usage: clopy [OPTIONS] [DIRECTORY]

A CLI tool to efficiently copy code from your codebase to language models (LLMs).
Uses fzf for file exploration, respects .gitignore by default, and processes files
using files-to-prompt CLI.

OPTIONS:
    -f, --format FORMAT     Output format: cxml (default), markdown, plain
    -e, --extension EXT     Include only files with specified extension (can be used multiple times)
    -i, --include-hidden    Include hidden files and directories
    -g, --ignore-gitignore  Ignore .gitignore files and include all files
    -o, --output FILE       Write output to file instead of copying to clipboard
    -n, --no-copy          Don't copy to clipboard, just output to stdout
    -l, --line-numbers      Include line numbers in output
    -p, --no-preview       Disable preview window in fzf
    --ignore PATTERN        Ignore files matching pattern (can be used multiple times)
    -h, --help             Show this help message

EXAMPLES:
    clopy                          # Explore current directory
    clopy src/                     # Explore src/ directory
    clopy -e py -e js              # Only show Python and JavaScript files
    clopy -f markdown -o out.md    # Output as Markdown to file
    clopy -i -g                    # Include hidden files, ignore .gitignore
    
KEYBINDINGS IN FZF:
    ENTER        - Select files and process
    TAB          - Toggle file selection (multi-select)
    CTRL-A       - Select all files
    CTRL-D       - Deselect all files
    CTRL-P       - Toggle preview window
    CTRL-R       - Refresh file list
    ESC/CTRL-C   - Cancel and exit

EOF
}

# Check if running in interactive mode
is_interactive() {
    [[ -t 0 && -t 1 && -t 2 ]]
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command_exists fzf; then
        missing_deps+=("fzf")
    fi
    
    if ! command_exists fd; then
        missing_deps+=("fd")
    fi
    
    if ! command_exists files-to-prompt; then
        missing_deps+=("files-to-prompt")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}" >&2
        printf '  - %s\n' "${missing_deps[@]}" >&2
        echo -e "\n${YELLOW}Install them with:${NC}" >&2
        echo "  brew install fzf fd" >&2
        echo "  pip install files-to-prompt" >&2
        exit 1
    fi
}

# Get copy command based on platform
get_copy_command() {
    if command_exists pbcopy; then
        echo "pbcopy"
    elif command_exists xclip; then
        echo "xclip -selection clipboard"
    elif command_exists xsel; then
        echo "xsel --clipboard --input"
    else
        return 1
    fi
}

# Log message with color
log() {
    local level=$1
    shift
    case $level in
        "info")  echo -e "${BLUE}[INFO]${NC} $*" >&2 ;;
        "warn")  echo -e "${YELLOW}[WARN]${NC} $*" >&2 ;;
        "error") echo -e "${RED}[ERROR]${NC} $*" >&2 ;;
        "success") echo -e "${GREEN}[SUCCESS]${NC} $*" >&2 ;;
    esac
}

# Build fd command based on options
build_fd_command() {
    local search_dir=${1:-.}
    local cmd="fd --type f --color=never"
    
    # Respect .gitignore by default (fd does this automatically)
    if [[ $RESPECT_GITIGNORE == false ]]; then
        cmd+=" --no-ignore"
    fi
    
    # Include hidden files if requested
    if [[ $INCLUDE_HIDDEN == true ]]; then
        cmd+=" --hidden"
    fi
    
    # Add extension filters
    if [[ ${#EXTENSIONS[@]} -gt 0 ]]; then
        for ext in "${EXTENSIONS[@]}"; do
            cmd+=" --extension $ext"
        done
    fi
    
    # Add ignore patterns
    if [[ ${#IGNORE_PATTERNS[@]} -gt 0 ]]; then
        for pattern in "${IGNORE_PATTERNS[@]}"; do
            cmd+=" --exclude '$pattern'"
        done
    fi
    
    # Always exclude .git directory
    cmd+=" --exclude .git"
    
    cmd+=" . '$search_dir'"
    echo "$cmd"
}

# Build fzf options
build_fzf_options() {
    local fd_cmd="$1"
    local fzf_opts=(
        "--multi"
        "--height=90%"
        "--layout=reverse"
        "--border=rounded"
        "--info=inline"
        "--prompt=📁 Select files > "
        "--pointer=▶"
        "--marker=✓"
        "--color=fg:gray,fg+:white,bg+:-1,hl:yellow,hl+:red,info:green,prompt:blue,pointer:red,marker:green"
        "--header=ENTER: process files | TAB: toggle selection | CTRL-A: select all | CTRL-D: deselect all | CTRL-R: refresh"
    )
    
    # Add preview if enabled
    if [[ $SHOW_PREVIEW == true ]]; then
        fzf_opts+=(
            "--preview=$DEFAULT_PREVIEW_CMD"
            "--preview-window=right:50%:wrap"
        )
    fi
    
    # Add key bindings
    local bindings=(
        "ctrl-a:select-all"
        "ctrl-d:deselect-all"
        "ctrl-p:toggle-preview"
        "ctrl-r:reload($fd_cmd)"
    )
    
    for binding in "${bindings[@]}"; do
        fzf_opts+=("--bind=$binding")
    done
    
    printf '%s\n' "${fzf_opts[@]}"
}

# Select files using fzf
select_files() {
    local search_dir=${1:-.}
    
    if [[ ! -d "$search_dir" ]]; then
        log error "Directory '$search_dir' does not exist"
        exit 1
    fi
    
    log info "Exploring files in: $search_dir"
    
    local fd_cmd
    fd_cmd=$(build_fd_command "$search_dir")
    
    local fzf_opts
    # Use mapfile if available, otherwise use while read loop
    if command_exists mapfile; then
        mapfile -t fzf_opts < <(build_fzf_options "$fd_cmd")
    else
        local opts_output
        opts_output=$(build_fzf_options "$fd_cmd")
        fzf_opts=()
        while IFS= read -r line; do
            fzf_opts+=("$line")
        done <<< "$opts_output"
    fi
    
    # Execute fd and pipe to fzf
    eval "$fd_cmd" | fzf "${fzf_opts[@]}"
}

# Process selected files with files-to-prompt
process_files() {
    local files=("$@")
    
    if [[ ${#files[@]} -eq 0 ]]; then
        log warn "No files selected"
        return 1
    fi
    
    log info "Processing ${#files[@]} file(s) with files-to-prompt..."
    
    # Build files-to-prompt command
    local cmd="files-to-prompt"
    
    # Add format option
    case $DEFAULT_FORMAT in
        "cxml"|"claude")
            cmd+=" --cxml"
            ;;
        "markdown"|"md")
            cmd+=" --markdown"
            ;;
        "plain")
            # Default format, no flag needed
            ;;
        *)
            log warn "Unknown format '$DEFAULT_FORMAT', using plain format"
            ;;
    esac
    
    # Add line numbers if requested
    if [[ $SHOW_LINE_NUMBERS == true ]]; then
        cmd+=" --line-numbers"
    fi
    
    # Add files to command
    for file in "${files[@]}"; do
        cmd+=" $(printf '%q' "$file")"
    done
    
    # Execute files-to-prompt
    eval "$cmd"
}

# Copy content to clipboard or output to file/stdout
handle_output() {
    local content="$1"
    
    if [[ -n "$OUTPUT_FILE" ]]; then
        # Output to file
        echo "$content" > "$OUTPUT_FILE"
        log success "Output written to: $OUTPUT_FILE"
    elif [[ $NO_COPY == true ]] || ! is_interactive; then
        # Output to stdout
        echo "$content"
    else
        # Copy to clipboard
        local copy_cmd
        if copy_cmd=$(get_copy_command); then
            echo "$content" | eval "$copy_cmd"
            log success "Content copied to clipboard!"
        else
            log warn "No clipboard utility found (pbcopy, xclip, xsel)"
            log info "Outputting to stdout instead:"
            echo "$content"
        fi
    fi
}

# Parse command line options
parse_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--format)
                if [[ $# -lt 2 ]]; then
                    log error "Option $1 requires an argument"
                    exit 1
                fi
                DEFAULT_FORMAT="$2"
                shift 2
                ;;
            -e|--extension)
                if [[ $# -lt 2 ]]; then
                    log error "Option $1 requires an argument"
                    exit 1
                fi
                EXTENSIONS+=("$2")
                shift 2
                ;;
            -i|--include-hidden)
                INCLUDE_HIDDEN=true
                shift
                ;;
            -g|--ignore-gitignore)
                RESPECT_GITIGNORE=false
                shift
                ;;
            -o|--output)
                if [[ $# -lt 2 ]]; then
                    log error "Option $1 requires an argument"
                    exit 1
                fi
                OUTPUT_FILE="$2"
                shift 2
                ;;
            -n|--no-copy)
                NO_COPY=true
                shift
                ;;
            -l|--line-numbers)
                SHOW_LINE_NUMBERS=true
                shift
                ;;
            -p|--no-preview)
                SHOW_PREVIEW=false
                shift
                ;;
            --ignore)
                if [[ $# -lt 2 ]]; then
                    log error "Option $1 requires an argument"
                    exit 1
                fi
                IGNORE_PATTERNS+=("$2")
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            -*)
                log error "Unknown option: $1"
                usage
                exit 1
                ;;
            *)
                # Positional argument (directory)
                break
                ;;
        esac
    done
}

# Main function
main() {
    # Parse command line options first
    parse_options "$@"
    
    # After parsing options, get remaining arguments
    local remaining_args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--format|-e|--extension|-o|--output|--ignore)
                # Skip options that take arguments (already processed)
                shift 2
                ;;
            -i|--include-hidden|-g|--ignore-gitignore|-n|--no-copy|-l|--line-numbers|-p|--no-preview|-h|--help)
                # Skip flag options (already processed)
                shift
                ;;
            *)
                # This is a positional argument
                remaining_args+=("$1")
                shift
                ;;
        esac
    done
    
    # Set search directory
    local search_dir="."
    if [[ ${#remaining_args[@]} -gt 0 ]]; then
        search_dir="${remaining_args[0]}"
    fi
    
    # Check dependencies
    check_dependencies
    
    # Check if running in pipe/redirect mode
    if ! is_interactive; then
        log info "Running in non-interactive mode"
        NO_COPY=true
    fi
    
    # Select files using fzf
    local selected_files
    if ! selected_files=$(select_files "$search_dir"); then
        log warn "No files selected or operation cancelled"
        exit 0
    fi
    
    # Convert newline-separated string to array
    local file_array=()
    if command_exists mapfile; then
        mapfile -t file_array <<< "$selected_files"
    else
        while IFS= read -r line; do
            [[ -n "$line" ]] && file_array+=("$line")
        done <<< "$selected_files"
    fi
    
    # Process files and get content
    local content
    if ! content=$(process_files "${file_array[@]}"); then
        log error "Failed to process files"
        exit 1
    fi
    
    # Handle output (copy to clipboard, write to file, or output to stdout)
    handle_output "$content"
    
    log success "Operation completed successfully!"
}

# Execute main function with all arguments
main "$@"